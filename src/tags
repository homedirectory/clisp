!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jjnkn/programs/lisp/clisp/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
ARR_LEN	common.h	/^#define ARR_LEN(/;"	d
ATOM	types.h	/^    ATOM,$/;"	e	enum:MalType
Arr	utils.h	/^typedef struct Arr {$/;"	s
Arr	utils.h	/^} Arr;$/;"	t	typeref:struct:Arr
Arr_add	utils.c	/^size_t Arr_add(Arr *arr, void *ptr) {$/;"	f	typeref:typename:size_t
Arr_copy	utils.c	/^Arr *Arr_copy(const Arr *arr)$/;"	f	typeref:typename:Arr *
Arr_copyf	utils.c	/^Arr *Arr_copyf(const Arr *arr, const copier_t copier) {$/;"	f	typeref:typename:Arr *
Arr_find	utils.c	/^int Arr_find(const Arr *arr, const void *ptr) {$/;"	f	typeref:typename:int
Arr_findf	utils.c	/^int Arr_findf(const Arr *arr, const void *ptr, const equals_t eq) {$/;"	f	typeref:typename:int
Arr_foreach	utils.c	/^void Arr_foreach(const Arr *arr, const unary_void_t func)$/;"	f	typeref:typename:void
Arr_free	utils.c	/^void Arr_free(Arr *arr) {$/;"	f	typeref:typename:void
Arr_freep	utils.c	/^void Arr_freep(Arr *arr, free_t freer) {$/;"	f	typeref:typename:void
Arr_get	utils.c	/^void *Arr_get(const Arr *arr, size_t idx) {$/;"	f	typeref:typename:void *
Arr_last	utils.c	/^void *Arr_last(const Arr *arr)$/;"	f	typeref:typename:void *
Arr_new	utils.c	/^Arr *Arr_new() {$/;"	f	typeref:typename:Arr *
Arr_newn	utils.c	/^Arr *Arr_newn(const size_t cap) {$/;"	f	typeref:typename:Arr *
Arr_replace	utils.c	/^void *Arr_replace(Arr *arr, size_t idx, void *ptr) {$/;"	f	typeref:typename:void *
Atom	types.h	/^} Atom;$/;"	t	typeref:struct:__anon078763300308
Atom_copy	types.c	/^Atom *Atom_copy(const Atom *atom)$/;"	f	typeref:typename:Atom *
Atom_eq	types.c	/^bool Atom_eq(const Atom *a1, const Atom *a2)$/;"	f	typeref:typename:bool
Atom_free	types.c	/^void Atom_free(Atom *atom)$/;"	f	typeref:typename:void
Atom_new	types.c	/^Atom *Atom_new(MalDatum *dtm)$/;"	f	typeref:typename:Atom *
Atom_reset	types.c	/^void Atom_reset(Atom *atom, MalDatum *dtm) $/;"	f	typeref:typename:void
BADSTX	mylisp.c	/^#define BADSTX(/;"	d	file:
Bucket	hashtbl.c	/^typedef struct Bucket {$/;"	s	file:
Bucket	hashtbl.c	/^} Bucket;$/;"	t	typeref:struct:Bucket	file:
Bucket_find	hashtbl.c	/^static void *Bucket_find(const Bucket *bkt, const void *key, const keyeq_t keyeq)$/;"	f	typeref:typename:void *	file:
Bucket_free	hashtbl.c	/^static void Bucket_free(Bucket *bkt, const free_t keyfree, const free_t valfree)$/;"	f	typeref:typename:void	file:
Bucket_new	hashtbl.c	/^static Bucket *Bucket_new(const void *key, const void *val) {$/;"	f	typeref:typename:Bucket *	file:
CAPACITY_INCR_RATIO	utils.c	/^#define CAPACITY_INCR_RATIO /;"	d	file:
COMMENT_CHAR	reader.c	/^#define COMMENT_CHAR /;"	d	file:
COMMENT_CHARS	reader.c	/^#define COMMENT_CHARS /;"	d	file:
DEBUG	common.h	/^#define DEBUG(/;"	d
DEF	core.c	/^#define DEF(/;"	d	file:
DEFAULT_CAPACITY	hashtbl.c	/^#define DEFAULT_CAPACITY /;"	d	file:
DEFAULT_CAPACITY	utils.c	/^#define DEFAULT_CAPACITY /;"	d	file:
ERROR	common.h	/^#define ERROR(/;"	d
EXCEPTION	types.h	/^    EXCEPTION,$/;"	e	enum:MalType
Exception	types.h	/^} Exception;$/;"	t	typeref:struct:__anon078763300408
Exception_copy	types.c	/^Exception *Exception_copy(const Exception *exn)$/;"	f	typeref:typename:Exception *
Exception_eq	types.c	/^bool Exception_eq(const Exception *exn1, const Exception *exn2)$/;"	f	typeref:typename:bool
Exception_free	types.c	/^void Exception_free(Exception *exn)$/;"	f	typeref:typename:void
Exception_new	types.c	/^Exception *Exception_new(const MalDatum *dtm)$/;"	f	typeref:typename:Exception *
FALSE	types.h	/^    FALSE, $/;"	e	enum:MalType
FATAL	common.h	/^#define FATAL(/;"	d
FREE	mem_debug.h	/^#define FREE(/;"	d
GROW_RATIO	hashtbl.c	/^#define GROW_RATIO /;"	d	file:
HISTORY_FILE	mylisp.c	/^#define HISTORY_FILE /;"	d	file:
HashTbl	hashtbl.c	/^typedef struct HashTbl {$/;"	s	file:
HashTbl	hashtbl.c	/^} HashTbl;$/;"	t	typeref:struct:HashTbl	file:
HashTbl	hashtbl.h	/^typedef struct HashTbl HashTbl;$/;"	t	typeref:struct:HashTbl
HashTbl_free	hashtbl.c	/^void HashTbl_free(HashTbl *tbl, free_t keyfree, free_t valfree)$/;"	f	typeref:typename:void
HashTbl_get	hashtbl.c	/^void *HashTbl_get(const HashTbl *tbl, const void *key, const keyeq_t keyeq)$/;"	f	typeref:typename:void *
HashTbl_keyidx	hashtbl.c	/^static uint HashTbl_keyidx(HashTbl *tbl, const void *key)$/;"	f	typeref:typename:uint	file:
HashTbl_new	hashtbl.c	/^HashTbl *HashTbl_new(hashkey_t hashkey)$/;"	f	typeref:typename:HashTbl *
HashTbl_newc	hashtbl.c	/^HashTbl *HashTbl_newc(uint cap, hashkey_t hashkey)$/;"	f	typeref:typename:HashTbl *
HashTbl_pop	hashtbl.c	/^void *HashTbl_pop(HashTbl *tbl, const void *key, const keyeq_t keyeq)$/;"	f	typeref:typename:void *
HashTbl_print	hashtbl.c	/^void HashTbl_print(const HashTbl *tbl, const printkey_t printkey, const printval_t printval)$/;"	f	typeref:typename:void
HashTbl_put	hashtbl.c	/^void HashTbl_put(HashTbl *tbl, const void *key, const void *val)$/;"	f	typeref:typename:void
HashTbl_put_bkt_at	hashtbl.c	/^static void HashTbl_put_bkt_at(HashTbl *tbl, Bucket *bkt, uint idx)$/;"	f	typeref:typename:void	file:
INT	types.h	/^    INT, $/;"	e	enum:MalType
LF_ERROR	types.c	/^    LF_ERROR,$/;"	e	enum:LastFail	file:
LF_EXCEPTION	types.c	/^    LF_EXCEPTION$/;"	e	enum:LastFail	file:
LF_NONE	types.c	/^    LF_NONE,$/;"	e	enum:LastFail	file:
LIST	types.h	/^    LIST, $/;"	e	enum:MalType
LOG	common.h	/^#define LOG(/;"	d
LOG_NULL	common.h	/^#define LOG_NULL(/;"	d
LastFail	types.c	/^enum LastFail {$/;"	g	file:
List	types.h	/^} List;$/;"	t	typeref:struct:__anon078763300108
List_add	types.c	/^void List_add(List *list, MalDatum *datum) {$/;"	f	typeref:typename:void
List_append	types.c	/^void List_append(List *dst, const List *src)$/;"	f	typeref:typename:void
List_cons_new	types.c	/^List *List_cons_new(List *list, MalDatum *datum)$/;"	f	typeref:typename:List *
List_copy	types.c	/^List *List_copy(const List *list) {$/;"	f	typeref:typename:List *
List_deep_copy	types.c	/^List *List_deep_copy(const List *list) {$/;"	f	typeref:typename:List *
List_empty	types.c	/^const List *List_empty() { return &g_empty_list; }$/;"	f	typeref:typename:const List *
List_eq	types.c	/^bool List_eq(const List *lst1, const List *lst2) {$/;"	f	typeref:typename:bool
List_free	types.c	/^void List_free(List *list) {$/;"	f	typeref:typename:void
List_isempty	types.c	/^bool List_isempty(const List *list) {$/;"	f	typeref:typename:bool
List_len	types.c	/^size_t List_len(const List *list) {$/;"	f	typeref:typename:size_t
List_new	types.c	/^List *List_new() {$/;"	f	typeref:typename:List *
List_ref	types.c	/^MalDatum *List_ref(const List *list, size_t idx) { $/;"	f	typeref:typename:MalDatum *
List_rest_new	types.c	/^List *List_rest_new(List *list)$/;"	f	typeref:typename:List *
MAX_INT_DIGITS	types.h	/^#define MAX_INT_DIGITS /;"	d
MT_COUNT	types.h	/^    MT_COUNT$/;"	e	enum:MalType
MalDatum	types.h	/^typedef struct MalDatum MalDatum;$/;"	t	typeref:struct:MalDatum
MalDatum	types.h	/^typedef struct MalDatum {$/;"	s
MalDatum	types.h	/^} MalDatum;$/;"	t	typeref:struct:MalDatum
MalDatum_bool	types.c	/^const MalDatum *MalDatum_bool(bool b)$/;"	f	typeref:typename:const MalDatum *
MalDatum_copy	types.c	/^MalDatum *MalDatum_copy(const MalDatum *datum) {$/;"	f	typeref:typename:MalDatum *
MalDatum_deep_copy	types.c	/^MalDatum *MalDatum_deep_copy(const MalDatum *datum) {$/;"	f	typeref:typename:MalDatum *
MalDatum_empty_list	types.c	/^const MalDatum *MalDatum_empty_list() { return &g_MalDatum_empty_list; }$/;"	f	typeref:typename:const MalDatum *
MalDatum_eq	types.c	/^bool MalDatum_eq(const MalDatum *md1, const MalDatum *md2) {$/;"	f	typeref:typename:bool
MalDatum_false	types.c	/^const MalDatum *MalDatum_false()      { return &g_MalDatum_false;      }$/;"	f	typeref:typename:const MalDatum *
MalDatum_free	types.c	/^void MalDatum_free(MalDatum *datum) {$/;"	f	typeref:typename:void
MalDatum_is_singleton	types.c	/^bool MalDatum_is_singleton(const MalDatum *datum)$/;"	f	typeref:typename:bool
MalDatum_isfalse	types.c	/^bool MalDatum_isfalse(const MalDatum *datum) {$/;"	f	typeref:typename:bool
MalDatum_islist	types.c	/^bool MalDatum_islist(const MalDatum *datum) {$/;"	f	typeref:typename:bool
MalDatum_isnil	types.c	/^bool MalDatum_isnil(const MalDatum *datum) {$/;"	f	typeref:typename:bool
MalDatum_istype	types.c	/^bool MalDatum_istype(const MalDatum *datum, MalType type) {$/;"	f	typeref:typename:bool
MalDatum_new_atom	types.c	/^MalDatum *MalDatum_new_atom(Atom *atom)$/;"	f	typeref:typename:MalDatum *
MalDatum_new_exn	types.c	/^MalDatum *MalDatum_new_exn(Exception *exn)$/;"	f	typeref:typename:MalDatum *
MalDatum_new_int	types.c	/^MalDatum *MalDatum_new_int(const int i) {$/;"	f	typeref:typename:MalDatum *
MalDatum_new_list	types.c	/^MalDatum *MalDatum_new_list(List *list) {$/;"	f	typeref:typename:MalDatum *
MalDatum_new_proc	types.c	/^MalDatum *MalDatum_new_proc(Proc *proc) {$/;"	f	typeref:typename:MalDatum *
MalDatum_new_string	types.c	/^MalDatum *MalDatum_new_string(const char *str) {$/;"	f	typeref:typename:MalDatum *
MalDatum_new_sym	types.c	/^static MalDatum *MalDatum_new_sym(const Symbol *symbol) { $/;"	f	typeref:typename:MalDatum *	file:
MalDatum_nil	types.c	/^const MalDatum *MalDatum_nil()        { return &g_MalDatum_nil;        }$/;"	f	typeref:typename:const MalDatum *
MalDatum_own	types.c	/^void MalDatum_own(MalDatum *datum) $/;"	f	typeref:typename:void
MalDatum_print	types.c	/^void MalDatum_print(const MalDatum *dtm)$/;"	f	typeref:typename:void
MalDatum_release	types.c	/^void MalDatum_release(MalDatum *datum)$/;"	f	typeref:typename:void
MalDatum_release_free	types.c	/^void MalDatum_release_free(MalDatum *dtm)$/;"	f	typeref:typename:void
MalDatum_symbol_get	types.c	/^MalDatum *MalDatum_symbol_get(const char *name)$/;"	f	typeref:typename:MalDatum *
MalDatum_true	types.c	/^const MalDatum *MalDatum_true()       { return &g_MalDatum_true;       }$/;"	f	typeref:typename:const MalDatum *
MalEnv	env.h	/^typedef struct MalEnv {$/;"	s
MalEnv	env.h	/^} MalEnv;$/;"	t	typeref:struct:MalEnv
MalEnv	types.h	/^typedef struct MalEnv MalEnv; \/\/ from env.h$/;"	t	typeref:struct:MalEnv
MalEnv_enclosing_root	env.c	/^MalEnv *MalEnv_enclosing_root(MalEnv *env) $/;"	f	typeref:typename:MalEnv *
MalEnv_free	env.c	/^void MalEnv_free(MalEnv *env) {$/;"	f	typeref:typename:void
MalEnv_get	env.c	/^MalDatum *MalEnv_get(const MalEnv *env, const MalDatum *id) {$/;"	f	typeref:typename:MalDatum *
MalEnv_new	env.c	/^MalEnv *MalEnv_new(MalEnv *enclosing) {$/;"	f	typeref:typename:MalEnv *
MalEnv_own	env.c	/^void MalEnv_own(MalEnv *env)$/;"	f	typeref:typename:void
MalEnv_put	env.c	/^MalDatum *MalEnv_put(MalEnv *env, MalDatum *id, MalDatum *datum) {$/;"	f	typeref:typename:MalDatum *
MalEnv_release	env.c	/^void MalEnv_release(MalEnv *env)$/;"	f	typeref:typename:void
MalType	types.h	/^typedef enum MalType {$/;"	g
MalType	types.h	/^} MalType;$/;"	t	typeref:enum:MalType
MalType_tostr	types.c	/^char *MalType_tostr(MalType type) {$/;"	f	typeref:typename:char *
NIL	types.h	/^    NIL, $/;"	e	enum:MalType
Node	types.h	/^struct Node {$/;"	s
OWN	mem_debug.h	/^#define OWN(/;"	d
PREFIX	mem_debug.c	/^#define PREFIX /;"	d	file:
PROCEDURE	types.h	/^    PROCEDURE,$/;"	e	enum:MalType
PROMPT	mylisp.c	/^#define PROMPT /;"	d	file:
Proc	types.h	/^struct Proc {$/;"	s
Proc	types.h	/^typedef struct Proc Proc;$/;"	t	typeref:struct:Proc
Proc_builtin	types.c	/^Proc *Proc_builtin(const char *name, int argc, bool variadic, const builtin_apply_t apply) {$/;"	f	typeref:typename:Proc *
Proc_copy	types.c	/^Proc *Proc_copy(const Proc *proc) {$/;"	f	typeref:typename:Proc *
Proc_eq	types.c	/^bool Proc_eq(const Proc *proc1, const Proc *proc2) {$/;"	f	typeref:typename:bool
Proc_free	types.c	/^void Proc_free(Proc *proc) {$/;"	f	typeref:typename:void
Proc_is_macro	types.c	/^bool Proc_is_macro(const Proc *proc)$/;"	f	typeref:typename:bool
Proc_is_named	types.c	/^bool Proc_is_named(const Proc *proc)$/;"	f	typeref:typename:bool
Proc_name	types.c	/^char *Proc_name(const Proc *proc)$/;"	f	typeref:typename:char *
Proc_new	types.c	/^Proc *Proc_new(const char *name, $/;"	f	typeref:typename:Proc *
Proc_new_lambda	types.c	/^Proc *Proc_new_lambda(int argc, bool variadic, const Arr *params, const Arr *body, MalEnv *env) $/;"	f	typeref:typename:Proc *
QUASIQUOTE_MACRO_CHAR	reader.c	/^#define QUASIQUOTE_MACRO_CHAR /;"	d	file:
QUOTE_MACRO_CHAR	reader.c	/^#define QUOTE_MACRO_CHAR /;"	d	file:
Reader	reader.h	/^typedef struct Reader {$/;"	s
Reader	reader.h	/^} Reader;$/;"	t	typeref:struct:Reader
Reader_free	reader.c	/^void Reader_free(Reader *rdr) {$/;"	f	typeref:typename:void
Reader_next	reader.c	/^const char *Reader_next(Reader *rdr) {$/;"	f	typeref:typename:const char *
Reader_peek	reader.c	/^const char *Reader_peek(const Reader *rdr) {$/;"	f	typeref:typename:const char *
SIZE_THRESH_RATIO	hashtbl.c	/^#define SIZE_THRESH_RATIO /;"	d	file:
SPLICE_UNQUOTE_MACRO_STR	reader.c	/^#define SPLICE_UNQUOTE_MACRO_STR /;"	d	file:
STRING	types.h	/^    STRING, \/\/ code-form may differ from data-form (e.g., escaped characters)$/;"	e	enum:MalType
STR_ASM_DEF_CAP	utils.c	/^#define STR_ASM_DEF_CAP /;"	d	file:
STR_ASM_GROW_RAT	utils.c	/^#define STR_ASM_GROW_RAT /;"	d	file:
SYMBOL	types.h	/^    SYMBOL, $/;"	e	enum:MalType
SYMBOL_INV_CHARS	reader.c	/^#define SYMBOL_INV_CHARS /;"	d	file:
StrAsm	utils.h	/^typedef struct StrAsm {$/;"	s
StrAsm	utils.h	/^} StrAsm;$/;"	t	typeref:struct:StrAsm
StrAsm_add	utils.c	/^void StrAsm_add(StrAsm *sasm, const char *s)$/;"	f	typeref:typename:void
StrAsm_addc	utils.c	/^void StrAsm_addc(StrAsm *sasm, char c)$/;"	f	typeref:typename:void
StrAsm_addn	utils.c	/^void StrAsm_addn(StrAsm *sasm, const char *s, size_t n)$/;"	f	typeref:typename:void
StrAsm_destroy	utils.c	/^void StrAsm_destroy(StrAsm *sasm)$/;"	f	typeref:typename:void
StrAsm_drop	utils.c	/^void StrAsm_drop(StrAsm *sasm, size_t n)$/;"	f	typeref:typename:void
StrAsm_hasroom	utils.c	/^static bool StrAsm_hasroom(const StrAsm *sasm, size_t n)$/;"	f	typeref:typename:bool	file:
StrAsm_init	utils.c	/^StrAsm *StrAsm_init(StrAsm *sasm)$/;"	f	typeref:typename:StrAsm *
StrAsm_initsz	utils.c	/^StrAsm *StrAsm_initsz(StrAsm *sasm, size_t cap)$/;"	f	typeref:typename:StrAsm *
StrAsm_len	utils.c	/^size_t StrAsm_len(const StrAsm *sasm)$/;"	f	typeref:typename:size_t
StrAsm_mkroom	utils.c	/^static void StrAsm_mkroom(StrAsm *sasm, size_t n)$/;"	f	typeref:typename:void	file:
StrAsm_str	utils.c	/^char *StrAsm_str(const StrAsm *sasm)$/;"	f	typeref:typename:char *
Symbol	types.h	/^typedef struct Symbol {$/;"	s
Symbol	types.h	/^} Symbol;$/;"	t	typeref:struct:Symbol
Symbol_copy	types.c	/^Symbol *Symbol_copy(Symbol *sym) {$/;"	f	typeref:typename:Symbol *
Symbol_eq	types.c	/^bool Symbol_eq(const Symbol *sym1, const Symbol *sym2)$/;"	f	typeref:typename:bool
Symbol_eq_str	types.c	/^bool Symbol_eq_str(const Symbol *sym, const char *str) {$/;"	f	typeref:typename:bool
Symbol_free	types.c	/^void Symbol_free(Symbol *symbol) {$/;"	f	typeref:typename:void
Symbol_new	types.c	/^\/*static*\/ Symbol *Symbol_new(const char *name) {$/;"	f	typeref:typename:Symbol *
TRUE	types.h	/^    TRUE, $/;"	e	enum:MalType
UNQUOTE_MACRO_CHAR	reader.c	/^#define UNQUOTE_MACRO_CHAR /;"	d	file:
WHITESPACE_CHARS	reader.c	/^#define WHITESPACE_CHARS /;"	d	file:
_Exception_last	types.c	/^static Exception _Exception_last = {$/;"	v	typeref:typename:Exception	file:
_LastFail	types.c	/^} _LastFail = LF_NONE;$/;"	v	typeref:enum:LastFail
__anon078763300108	types.h	/^typedef struct {$/;"	s
__anon07876330020a	types.h	/^    union {$/;"	u	struct:Proc
__anon078763300308	types.h	/^typedef struct {$/;"	s
__anon078763300408	types.h	/^typedef struct {$/;"	s
__anon07876330050a	types.h	/^    union {$/;"	u	struct:MalDatum
addr_to_str	utils.c	/^char *addr_to_str(void *ptr)$/;"	f	typeref:typename:char *
apply	types.h	/^        builtin_apply_t apply; \/\/ function pointer for built-in procedures$/;"	m	union:Proc::__anon07876330020a	typeref:typename:builtin_apply_t
apply_proc	mylisp.c	/^static MalDatum *apply_proc(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
argc	types.h	/^    int argc; \/\/ amount of mandatory arguments$/;"	m	struct:Proc	typeref:typename:int
atom	types.h	/^        Atom *atom;$/;"	m	union:MalDatum::__anon07876330050a	typeref:typename:Atom *
body	types.h	/^        Arr *body; \/\/ of *MalDatum$/;"	m	union:Proc::__anon07876330020a	typeref:typename:Arr *
buckets	hashtbl.c	/^    Bucket **buckets;$/;"	m	struct:HashTbl	typeref:typename:Bucket **	file:
builtin	types.h	/^    bool builtin;$/;"	m	struct:Proc	typeref:typename:bool
builtin_apply_t	types.h	/^typedef MalDatum* (*builtin_apply_t)(const Proc*, const Arr *args, MalEnv *env);$/;"	t	typeref:typename:MalDatum * (*)(const Proc *,const Arr * args,MalEnv * env)
cap	hashtbl.c	/^    uint cap;$/;"	m	struct:HashTbl	typeref:typename:uint	file:
cap	utils.h	/^    size_t cap;$/;"	m	struct:Arr	typeref:typename:size_t
cap	utils.h	/^    size_t cap;$/;"	m	struct:StrAsm	typeref:typename:size_t
copier_t	utils.h	/^typedef void*(*copier_t)(void*);$/;"	t	typeref:typename:void * (*)(void *)
core_def_procs	core.c	/^void core_def_procs(MalEnv *env) $/;"	f	typeref:typename:void
datum	types.h	/^    MalDatum *datum;$/;"	m	struct:__anon078763300308	typeref:typename:MalDatum *
datum	types.h	/^    MalDatum *datum;$/;"	m	struct:__anon078763300408	typeref:typename:MalDatum *
datums	env.h	/^    Arr *datums;  \/\/ of MalDatum*$/;"	m	struct:MalEnv	typeref:typename:Arr *
didthrow	types.c	/^bool didthrow()$/;"	f	typeref:typename:bool
dyn_strcpy	utils.c	/^char *dyn_strcpy(const char *s) {$/;"	f	typeref:typename:char *
dyn_strncpy	utils.c	/^char *dyn_strncpy(const char *s, size_t n) {$/;"	f	typeref:typename:char *
enclosing	env.h	/^    struct MalEnv *enclosing;$/;"	m	struct:MalEnv	typeref:struct:MalEnv *
env	types.h	/^    \/*const*\/ MalEnv *env; \/\/ the enclosing environment in which this MAL procedure was defi/;"	m	struct:Proc	typeref:typename:MalEnv *
equals_t	utils.h	/^typedef bool (*equals_t)(const void*, const void*);$/;"	t	typeref:typename:bool (*)(const void *,const void *)
error	types.c	/^void error(const char *fmt, ...)$/;"	f	typeref:typename:void
escape_char	utils.c	/^short escape_char(unsigned char c) $/;"	f	typeref:typename:short
eval	mylisp.c	/^MalDatum *eval(MalDatum *ast, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *
eval_application_tco	mylisp.c	/^static MalDatum *eval_application_tco(const Proc *proc, const Arr* args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
eval_ast	mylisp.c	/^MalDatum *eval_ast(const MalDatum *datum, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *
eval_def	mylisp.c	/^static MalDatum *eval_def(const List *list, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
eval_defmacro	mylisp.c	/^static MalDatum *eval_defmacro(const List *list, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
eval_do	mylisp.c	/^static MalDatum *eval_do(const List *list, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
eval_fnstar	mylisp.c	/^static MalDatum *eval_fnstar(const List *list, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
eval_if	mylisp.c	/^static MalDatum *eval_if(const List *ast_list, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
eval_letstar	mylisp.c	/^static MalDatum *eval_letstar(const List *list, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
eval_list	mylisp.c	/^List *eval_list(const List *list, MalEnv *env) {$/;"	f	typeref:typename:List *
eval_macroexpand	mylisp.c	/^static MalDatum *eval_macroexpand(List *ast_list, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
eval_quasiquote	mylisp.c	/^static MalDatum *eval_quasiquote(const List *list, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
eval_quasiquote_list	mylisp.c	/^static MalDatum *eval_quasiquote_list(const List *list, MalEnv *env, bool *splice)$/;"	f	typeref:typename:MalDatum *	file:
eval_quote	mylisp.c	/^static MalDatum *eval_quote(const List *list, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
eval_splice_unquote	mylisp.c	/^static List *eval_splice_unquote(const List *list, MalEnv *env) $/;"	f	typeref:typename:List *	file:
eval_stack_depth	mylisp.c	/^static int eval_stack_depth = 0; $/;"	v	typeref:typename:int	file:
eval_try_star	mylisp.c	/^static MalDatum *eval_try_star(List *ast_list, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
eval_unquote	mylisp.c	/^static MalDatum *eval_unquote(const List *list, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
exn	types.h	/^        Exception *exn;$/;"	m	union:MalDatum::__anon07876330050a	typeref:typename:Exception *
file_readable	utils.c	/^bool file_readable(const char *path)$/;"	f	typeref:typename:bool
file_to_str	utils.c	/^char *file_to_str(const char *path)$/;"	f	typeref:typename:char *
free_symbol_table	types.c	/^void free_symbol_table()$/;"	f	typeref:typename:void
free_t	common.h	/^typedef void (*free_t)(void *ptr);$/;"	t	typeref:typename:void (*)(void * ptr)
g_MalDatum_empty_list	types.c	/^static const MalDatum g_MalDatum_empty_list = { $/;"	v	typeref:typename:const MalDatum	file:
g_MalDatum_false	types.c	/^static const MalDatum g_MalDatum_false = { $/;"	v	typeref:typename:const MalDatum	file:
g_MalDatum_nil	types.c	/^static const MalDatum g_MalDatum_nil = { $/;"	v	typeref:typename:const MalDatum	file:
g_MalDatum_true	types.c	/^static const MalDatum g_MalDatum_true = { $/;"	v	typeref:typename:const MalDatum	file:
g_empty_list	types.c	/^static const List g_empty_list = { .len = 0, .head = NULL, .tail = NULL };$/;"	v	typeref:typename:const List	file:
g_symbol_table	types.c	/^static HashTbl *g_symbol_table;$/;"	v	typeref:typename:HashTbl *	file:
hash_str	types.c	/^static uint hash_str(const char *str)$/;"	f	typeref:typename:uint	file:
hashkey	hashtbl.c	/^    hashkey_t hashkey;$/;"	m	struct:HashTbl	typeref:typename:hashkey_t	file:
hashkey_t	hashtbl.h	/^typedef uint (*hashkey_t)(const void *);$/;"	t	typeref:typename:uint (*)(const void *)
head	types.h	/^    struct Node *head;$/;"	m	struct:__anon078763300108	typeref:struct:Node *
i	types.h	/^        int i;$/;"	m	union:MalDatum::__anon07876330050a	typeref:typename:int
ids	env.h	/^    Arr *ids;     \/\/ of MalDatum* representing symbols$/;"	m	struct:MalEnv	typeref:typename:Arr *
init_symbol_table	types.c	/^void init_symbol_table()$/;"	f	typeref:typename:void
items	utils.h	/^    void **items;$/;"	m	struct:Arr	typeref:typename:void **
key	hashtbl.c	/^    const void *key;$/;"	m	struct:Bucket	typeref:typename:const void *	file:
keyeq_t	hashtbl.h	/^typedef bool (*keyeq_t)(const void *, const void *);$/;"	t	typeref:typename:bool (*)(const void *,const void *)
len	types.h	/^    size_t len;$/;"	m	struct:__anon078763300108	typeref:typename:size_t
len	utils.h	/^    size_t len;$/;"	m	struct:Arr	typeref:typename:size_t
len	utils.h	/^    size_t len;$/;"	m	struct:StrAsm	typeref:typename:size_t
list	types.h	/^        List *list;$/;"	m	union:MalDatum::__anon07876330050a	typeref:typename:List *
logic	types.h	/^    } logic;$/;"	m	struct:Proc	typeref:union:Proc::__anon07876330020a
macro	types.h	/^    bool macro;$/;"	m	struct:Proc	typeref:typename:bool
macroexpand	mylisp.c	/^static MalDatum *macroexpand(MalDatum *ast, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
macroexpand_single	mylisp.c	/^static MalDatum *macroexpand_single(MalDatum *ast, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
main	mylisp.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
mal_add	core.c	/^static MalDatum *mal_add(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_addr	core.c	/^static MalDatum *mal_addr(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_apply	mylisp.c	/^static MalDatum *mal_apply(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mal_arity	core.c	/^static MalDatum *mal_arity(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_atom	core.c	/^static MalDatum *mal_atom(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mal_atomp	core.c	/^static MalDatum *mal_atomp(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_builtinp	core.c	/^static MalDatum *mal_builtinp(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_concat	core.c	/^static MalDatum *mal_concat(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mal_cons	core.c	/^static MalDatum *mal_cons(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mal_count	core.c	/^static MalDatum *mal_count(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_deref	core.c	/^static MalDatum *mal_deref(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_div	core.c	/^static MalDatum *mal_div(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_emptyp	core.c	/^static MalDatum *mal_emptyp(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_env	core.c	/^static MalDatum *mal_env(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mal_eq	core.c	/^static MalDatum *mal_eq(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_eval	mylisp.c	/^static MalDatum *mal_eval(const Proc *proc, const Arr *args, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
mal_evenp	core.c	/^static MalDatum *mal_evenp(const Proc *proc, const Arr *args, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
mal_exn	core.c	/^static MalDatum *mal_exn(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mal_exn_datum	core.c	/^static MalDatum *mal_exn_datum(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mal_exnp	core.c	/^static MalDatum *mal_exnp(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mal_falsep	core.c	/^static MalDatum *mal_falsep(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_gt	core.c	/^static MalDatum *mal_gt(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_list	core.c	/^static MalDatum *mal_list(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_list_ref	core.c	/^static MalDatum *mal_list_ref(const Proc *proc, const Arr *args, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
mal_list_rest	core.c	/^static MalDatum *mal_list_rest(const Proc *proc, const Arr *args, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
mal_listp	core.c	/^static MalDatum *mal_listp(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_macrop	core.c	/^static MalDatum *mal_macrop(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_map	mylisp.c	/^static MalDatum *mal_map(const Proc *proc, const Arr *args, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
mal_mod	core.c	/^static MalDatum *mal_mod(const Proc *proc, const Arr *args, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
mal_mul	core.c	/^static MalDatum *mal_mul(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_nth	core.c	/^static MalDatum *mal_nth(const Proc *proc, const Arr *args, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
mal_pr_str	core.c	/^static MalDatum *mal_pr_str(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mal_println	core.c	/^static MalDatum *mal_println(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mal_prn	core.c	/^static MalDatum *mal_prn(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mal_procedurep	core.c	/^static MalDatum *mal_procedurep(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_read_string	mylisp.c	/^static MalDatum *mal_read_string(const Proc *proc, const Arr *args, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
mal_refc	core.c	/^static MalDatum *mal_refc(const Proc *proc, const Arr *args, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
mal_reset_bang	core.c	/^static MalDatum *mal_reset_bang(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_rest	core.c	/^static MalDatum *mal_rest(const Proc *proc, const Arr *args, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
mal_slurp	mylisp.c	/^static MalDatum *mal_slurp(const Proc *proc, const Arr *args, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
mal_str	core.c	/^static MalDatum *mal_str(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mal_stringp	core.c	/^static MalDatum *mal_stringp(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_sub	core.c	/^static MalDatum *mal_sub(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_swap_bang	mylisp.c	/^static MalDatum *mal_swap_bang(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_symbol	core.c	/^static MalDatum *mal_symbol(const Proc *proc, const Arr *args, MalEnv *env) $/;"	f	typeref:typename:MalDatum *	file:
mal_symbolp	core.c	/^static MalDatum *mal_symbolp(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_truep	core.c	/^static MalDatum *mal_truep(const Proc *proc, const Arr *args, MalEnv *env) {$/;"	f	typeref:typename:MalDatum *	file:
mal_type	core.c	/^static MalDatum *mal_type(const Proc *proc, const Arr *args, MalEnv *env)$/;"	f	typeref:typename:MalDatum *	file:
mem_debug_free	mem_debug.c	/^void mem_debug_free(const char *name, const void *ptr, const char *file, unsigned int line, cons/;"	f	typeref:typename:void
mem_debug_own	mem_debug.c	/^void mem_debug_own(const char *name, const void *ptr, const char *file, unsigned int line, const/;"	f	typeref:typename:void
name	types.h	/^    char *name;$/;"	m	struct:Proc	typeref:typename:char *
name	types.h	/^    char *name;$/;"	m	struct:Symbol	typeref:typename:char *
next	hashtbl.c	/^    struct Bucket *next;$/;"	m	struct:Bucket	typeref:struct:Bucket *	file:
next	types.h	/^    struct Node *next;$/;"	m	struct:Node	typeref:struct:Node *
noop	types.c	/^static void noop(void *ptr) { }$/;"	f	typeref:typename:void	file:
params	types.h	/^    Arr *params; \/\/ of MalDatum* representing symbols (makes sense only for MAL procedures) $/;"	m	struct:Proc	typeref:typename:Arr *
parse_string	reader.c	/^static char *parse_string(const char *str) {$/;"	f	typeref:typename:char *	file:
parse_until	reader.c	/^static char *parse_until(const char *str, const char *set) {$/;"	f	typeref:typename:char *	file:
pos	reader.h	/^    size_t pos;$/;"	m	struct:Reader	typeref:typename:size_t
pr_list	printer.c	/^char *pr_list(const List *list, bool print_readably) $/;"	f	typeref:typename:char *
pr_repr	printer.c	/^char *pr_repr(const MalDatum *datum)$/;"	f	typeref:typename:char *
pr_str	printer.c	/^char *pr_str(const MalDatum *datum, bool print_readably) $/;"	f	typeref:typename:char *
print	mylisp.c	/^static char *print(MalDatum *datum) {$/;"	f	typeref:typename:char *	file:
print_str	types.c	/^static void print_str(const char *s)$/;"	f	typeref:typename:void	file:
print_symbol_table	types.c	/^void print_symbol_table()$/;"	f	typeref:typename:void
printkey_t	hashtbl.h	/^typedef void (*printkey_t)(const void*);$/;"	t	typeref:typename:void (*)(const void *)
printval_t	hashtbl.h	/^typedef void (*printval_t)(const void*);$/;"	t	typeref:typename:void (*)(const void *)
proc	types.h	/^        Proc *proc;$/;"	m	union:MalDatum::__anon07876330050a	typeref:typename:Proc *
read	mylisp.c	/^static MalDatum *read(const char* in) {$/;"	f	typeref:typename:MalDatum *	file:
read_atom	reader.c	/^static MalDatum *read_atom(const char *token) {$/;"	f	typeref:typename:MalDatum *	file:
read_form	reader.c	/^MalDatum *read_form(Reader *rdr) {$/;"	f	typeref:typename:MalDatum *
read_list	reader.c	/^static MalDatum *read_list(Reader *rdr) {$/;"	f	typeref:typename:MalDatum *	file:
read_str	reader.c	/^Reader *read_str(const char *str) {$/;"	f	typeref:typename:Reader *
refc	env.h	/^    long refc;    \/\/ reference count$/;"	m	struct:MalEnv	typeref:typename:long
refc	types.h	/^    long refc; \/\/ reference count$/;"	m	struct:MalDatum	typeref:typename:long
refc	types.h	/^    long refc; \/\/ reference count$/;"	m	struct:Node	typeref:typename:long
rep	mylisp.c	/^static void rep(const char *str, MalEnv *env) {$/;"	f	typeref:typename:void	file:
resize	utils.c	/^static void resize(Arr* arr, const size_t new_cap) {$/;"	f	typeref:typename:void	file:
size	hashtbl.c	/^    uint size;$/;"	m	struct:HashTbl	typeref:typename:uint	file:
str	utils.h	/^    char *str;$/;"	m	struct:StrAsm	typeref:typename:char *
str_escape	utils.c	/^char *str_escape(const char *src)$/;"	f	typeref:typename:char *
str_from_token	reader.c	/^static char *str_from_token(char *dst, const char *str)$/;"	f	typeref:typename:char *	file:
str_join	utils.c	/^char *str_join(char *strings[], size_t n, const char *sep)$/;"	f	typeref:typename:char *
strchrs	utils.c	/^const char *strchrs(const char *str, const char *chars) {$/;"	f	typeref:typename:const char *
streq	utils.c	/^bool streq(const char *s1, const char *s2)$/;"	f	typeref:typename:bool
stridx	utils.c	/^ssize_t stridx(const char *str, char c)$/;"	f	typeref:typename:ssize_t
string	types.h	/^        char *string;$/;"	m	union:MalDatum::__anon07876330050a	typeref:typename:char *
sym	types.h	/^        const Symbol *sym;$/;"	m	union:MalDatum::__anon07876330050a	typeref:typename:const Symbol *
sym_tbl_pop	types.c	/^static MalDatum *sym_tbl_pop(const char *name)$/;"	f	typeref:typename:MalDatum *	file:
tail	types.h	/^    struct Node *tail;$/;"	m	struct:__anon078763300108	typeref:struct:Node *
throw	types.c	/^void throw(const MalDatum *dtm)$/;"	f	typeref:typename:void
throwf	types.c	/^void throwf(const char *fmt, ...)$/;"	f	typeref:typename:void
thrown_copy	types.c	/^Exception *thrown_copy()$/;"	f	typeref:typename:Exception *
tokenize	reader.c	/^static Arr *tokenize(const char *str) {$/;"	f	typeref:typename:Arr *	file:
tokens	reader.h	/^    Arr *tokens;$/;"	m	struct:Reader	typeref:typename:Arr *
try_grow	hashtbl.c	/^static void try_grow(HashTbl *tbl)$/;"	f	typeref:typename:void	file:
type	types.h	/^    MalType type;$/;"	m	struct:MalDatum	typeref:typename:MalType
uint	hashtbl.h	/^typedef unsigned int uint;$/;"	t	typeref:typename:unsigned int
unary_void_t	utils.h	/^typedef void (*unary_void_t)(void*);$/;"	t	typeref:typename:void (*)(void *)
unescape_char	utils.c	/^unsigned char unescape_char(unsigned char c) $/;"	f	typeref:typename:unsigned char
val	hashtbl.c	/^    const void *val;$/;"	m	struct:Bucket	typeref:typename:const void *	file:
value	types.h	/^    MalDatum *value;$/;"	m	struct:Node	typeref:typename:MalDatum *
value	types.h	/^    } value;$/;"	m	struct:MalDatum	typeref:union:MalDatum::__anon07876330050a
variadic	types.h	/^    bool variadic; \/\/ accepts more arguments after mandatory ones (default: false)$/;"	m	struct:Proc	typeref:typename:bool
verify_proc_application	mylisp.c	/^static bool verify_proc_application(const Proc *proc, const Arr* args)$/;"	f	typeref:typename:bool	file:
verify_proc_arg_type	core.c	/^MalDatum *verify_proc_arg_type(const Proc *proc, const Arr *args, size_t arg_idx, $/;"	f	typeref:typename:MalDatum *
